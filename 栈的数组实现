
typedef struct Node
{
	int TopOfStack;//栈顶指针
	int Data[MAXSIZE];      //数组
}Stack;
//初始化一个栈
Stack *CreatStack(Stack *S)
{
	S->TopOfStack = -1;
	return S;
}
//求栈长
int Length(Stack *S)
{
	return S->TopOfStack;
}
//释放一个栈
void DisposeStack(Stack *S)
{
	if (S != NULL)
	{
		free(S->Data);
		free(S);
	}
}
//判断是否为空栈
int IsEmpty(Stack *S)
{
	return S->TopOfStack == -1;//是空栈返回1 不是返回0
}
//判断是否栈满
int IsFull(Stack *S)
{
	return S->TopOfStack == MAXSIZE;
}
//Pop弹出栈顶元素
void Pop(Stack *S)
{
	if (IsEmpty(S))
		printf("Empty stack\n");
	else
		S->TopOfStack--;
}
//进栈操作
void Push(int x, Stack *S)
{
	if (IsFull(S))
		printf("Full stack");
	else
	{
		S->TopOfStack++; 
		S->Data[S->TopOfStack] = x;
	}
}
//返回栈顶元素
int Top(Stack *S)
{
	if (!IsEmpty(S)) //若S不是空栈返回栈顶元素
		return S->Data[S->TopOfStack];
	else             //否则返回0报错
	{
		printf("Empty stack\n");
		return 0;
	}
}
/*打印*/
void printAll(Node *L)
{
	int i = 0;
	while (i<=L->TopOfStack)
	{		
		printf("%d  ", L->Data[i]);
		i++;
	}
	printf("\n");
	return;
}

int main()
{
	int i = 0;
	Stack *S = (Stack*)malloc(sizeof(Node));
	S = CreatStack(S);

	while (i != 9)
	{
		Push(i, S);
		i++;
	}
	printAll(S);

	while (!IsEmpty(S))
	{
		printf("%d  ", Top(S));
		Pop(S);
	}printf("\n");

	printf("%d\n", IsEmpty(S));
	
	system("pause");
	return 0;
}
